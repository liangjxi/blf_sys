# Output pattern : date [thread] priority category - message

#配置根Logger
#语法  log4j.rootLogger = [level] , Console, RollingFile, ...
#[level] 优先级  FATAL>ERROR>WARN>INFO>DEBUG
#Console, RollingFile表示为输出的目的地

#-------------------- 备注 --------------------------
#1.Appender 日志输出目的地
# org.apache.log4j.ConsoleAppender（控制台），
# org.apache.log4j.FileAppender（文件），
# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
# org.apache.log4j.net.SMTPAppender 邮件
# org.apache.log4j.jdbc.JDBCAppender 数据库

#2.Layout 日志输出格式
# %m   输出代码中指定的消息
# %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
# %r   输出自应用启动到输出该log信息耗费的毫秒数 
# %c   输出所属的类目，通常就是所在类的全名 
# %t   输出产生该日志事件的线程名 
# %n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
# %d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss ,SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
# %l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 

#3.布局
# org.apache.log4j.HTMLLayout（以HTML表格形式布局）
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

#配置根Logger
log4j.rootLogger=INFO, Console, RollingFile
#Console  //控制台输出
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %-5p [%c] - %m%n

#RollingFile  //文件输出  到指定大小会生成一个新的日志文件
log4j.appender.RollingFile=org.apache.log4j.RollingFileAppender
# 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志
log4j.appender.RollingFile.Threshold = info
log4j.appender.normalOutput.DatePattern="_'yyyy-MM-dd'.log"
log4j.appender.RollingFile.File=/Users/tennyson/Downloads/logs/${yyyy-MM-dd}_blf.log
log4j.appender.RollingFile.Append = true 
log4j.appender.RollingFile.MaxFileSize = 100MB
log4j.appender.RollingFile.MaxBackupIndex = 10
log4j.appender.RollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.RollingFile.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n

#druid 
 #log4j.logger.druid.sql=debug
 #log4j.logger.druid.sql.DataSource=debug
 #log4j.logger.druid.sql.Connection=debug
 #log4j.logger.druid.sql.Statement=debug
 #log4j.logger.druid.sql.ResultSet=debug
 
 
 
#输出到邮件
#log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender（指定输出到邮件）
#log4j.appender.MAIL.Threshold=FATAL
#log4j.appender.MAIL.BufferSize=10
#log4j.appender.MAIL.From=chenyl@hollycrm.com（发件人）
#log4j.appender.MAIL.SMTPHost=mail.hollycrm.com（SMTP服务器）
#log4j.appender.MAIL.Subject=Log4J Message
#log4j.appender.MAIL.To=chenyl@hollycrm.com（收件人）
#log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout（布局）
#log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n（格式）

#输出到数据库
#log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender（指定输出到数据库）
#log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test（指定数据库URL）
#log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver（指定数据库driver）
#log4j.appender.DATABASE.user=root（指定数据库用户）
#log4j.appender.DATABASE.password=root（指定数据库用户密码）
#log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES ('[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n')（组织SQL语句）
#log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout（布局）
#log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n（格式）
